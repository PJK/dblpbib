#!/usr/bin/env ruby

require 'rubygems'

require 'commander'
require 'fileutils'
require 'open-uri'

require 'dblpbib/version'

# Top-level CLI app
class DBLPCLI
	include Commander::Methods

	def shared_options(command)
		command.option(
			'--cache CACHE_DIR',
			String,
			'Cache directory. Single .bib entries are stored here'
		)
		command.option(
			'--output OUTPUT.bib',
			String,
			'Output bibliography. \'dblp.bib\' by default'
		)
	end

	def default_options(options)
		options.default cache: '.dblp'
		options.default output: 'dblp.bib'
	end

	def bib_path(cache, key)
		File.join(cache, key + '.bib')
	end

	def run
		program :name, 'DBLP BibTeX utility'
		program :description, Dblpbib::DESCRIPTION
		program :version, Dblpbib::VERSION

		command :build do |command|
			command.syntax = 'INPUT.tex'
			command.description = 'Fetches references to cache and compiles them'
			shared_options(command)

			command.action do |args, options|
				default_options(options)
				FileUtils.mkdir_p(options.cache)

				keys = Dblpbib.scan_keys(IO.read(args[0]))

				keys.each do |key|
					path = bib_path(options.cache, key)

					next if File.exist?(path)

					puts "Fetching #{key}"
					FileUtils.mkdir_p(File.dirname(path))

					begin
						File.write(
							path,
							open("https://dblp.uni-trier.de/rec/bib1/#{key}.bib").read
						)
					rescue OpenURI::HTTPError => e
						puts "Failed to fetch key #{key} (#{e}) -- " \
 						       "perhaps it is misspelled or doesn't exist?"
						exit 1
					end

					# TODO: crossrefs! When I got here I actually realized the 'standard'
					# output is perfectly OK for most situations...
				end

				File.open(options.output, 'w') do |output|
					output.truncate(0)

					keys.each do |key|
						output.write(File.read(bib_path(options.cache, key)))
					end

					puts "OK. Compiled #{keys.count} entries to #{output.path}"
				end
			end
		end

		default_command :build

		run!
	end
end

DBLPCLI.new.run
